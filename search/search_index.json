{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-on-my-documentation","title":"Welcome on my documentation","text":"<p>I'm glad to see you here !</p>"},{"location":"docker/","title":"Overview","text":"<p>You will find in this section all about my Docker configuration</p>"},{"location":"docker/wireguard_go2rtc_nat/","title":"Stream distant camera using Go2RTC and WireGuard","text":""},{"location":"docker/wireguard_go2rtc_nat/#project-overview","title":"Project Overview","text":""},{"location":"docker/wireguard_go2rtc_nat/#introduction","title":"Introduction","text":"<p>The aim of this project is to enable real-time streaming of a remote outdoor camera, viewable on an iPhone within the Home app.</p> <p>The solution was developed through discussions with colleagues and insights from Reddit, leading to the selection of specific tools.</p>"},{"location":"docker/wireguard_go2rtc_nat/#approach","title":"Approach","text":"<p>This setup involves two sites:</p> <ul> <li>Site A (Remote Location): Includes a Hikvision Camera and a Raspberry Pi 3.</li> <li>Site B (Home): Consists of an Ubuntu 22.04 VM with Docker and Home Assistant VM hosted on Proxmox server.</li> </ul> <p>The connection between these sites will be established through a VPN, for which Wireguard is the chosen solution.</p>"},{"location":"docker/wireguard_go2rtc_nat/#system-architecture","title":"System Architecture","text":""},{"location":"docker/wireguard_go2rtc_nat/#implementation-steps","title":"Implementation Steps","text":""},{"location":"docker/wireguard_go2rtc_nat/#setting-up-site-a","title":"Setting Up Site A","text":"<ol> <li> <p>Install and Configure WireGuard on Raspberry Pi:</p> <ul> <li>Use PiVPN for easy setup.</li> <li>Follow the provided documentation for a smooth installation.</li> </ul> </li> <li> <p>WireGuard Server Configuration:</p> <ul> <li>The configuration file (<code>/etc/wireguard/wg0.conf</code>) should be set up as follows:</li> </ul> /etc/wireguard/wg0.conf<pre><code>[Interface]\nAddress = 10.83.153.1/24\nMTU = 1480\nSaveConfig = true\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\nListenPort = 51879\nPrivateKey = XXX\n\n[Peer]\nPublicKey = XXX\nAllowedIPs = 10.83.153.3/32\nPersistentKeepalive = 25\n</code></pre> </li> </ol> <p>Warning</p> <p>Before updating your wireguard configuration ensure that server is stopped <code>wg-quick down wg0</code></p>"},{"location":"docker/wireguard_go2rtc_nat/#setting-up-site-b","title":"Setting Up Site B","text":"<ol> <li> <p>Deploy Docker-Compose Stack:</p> <ul> <li>The stack includes Wireguard, Go2RTC, and Autoheal containers.</li> <li>The <code>docker-compose.yml</code> file should be configured as shown:</li> </ul> docker-compose.yml<pre><code>version: \"3\"\nservices:\nwireguard:\nimage: linuxserver/wireguard\ncontainer_name: wireguard\ncap_add:\n- NET_ADMIN\n- SYS_MODULE\nsysctls:\n- net.ipv4.conf.all.src_valid_mark=1\nenvironment:\n- PUID=1000\n- PGID=1000\n- TZ=Europe/Paris\nvolumes:\n- /path/to/wireguard/config:/config\nrestart: always\nhealthcheck:\ntest: [\"CMD\", \"curl\", \"--fail\", \"http://192.168.1.201\"]\ninterval: 5s\nretries: 10\nstart_period: 30s\ntimeout: 5s\nlabels:\n- autoheal=true\nnetworks:\n- vpn\ngo2rtc:\nimage: alexxit/go2rtc\nrestart: unless-stopped\nenvironment:\n- TZ=Europe/Paris\nports:\n- \"1984:1984\"\n- \"8554:8554\"\ndepends_on:\n- wireguard\nnetworks:\n- vpn\nvolumes:\n- \"/path/to/go2rtc/config:/config\"\nautoheal:\nrestart: always\nimage: willfarrell/autoheal\nenvironment:\n- AUTOHEAL_CONTAINER_LABEL=all\nvolumes:\n- /var/run/docker.sock:/var/run/docker.sock:ro\nnetworks:\nvpn:\nname: vpn\ndriver: bridge\n</code></pre> </li> <li> <p>WireGuard Client Configuration:</p> <ul> <li>Configure the tunnel to facilitate communication between Frigate and the camera through Wireguard.</li> <li>Example <code>wg0.conf</code>:</li> </ul> wg0.conf<pre><code>[Interface]\nPrivateKey = XXX\nAddress = 10.83.153.3/24\nMTU = 1480\n\nPostUp = iptables -t nat -A PREROUTING -p tcp --dport 554 -j DNAT \\\n--to-destination 192.168.1.201:554\nPostUp = iptables -t nat -A POSTROUTING -j MASQUERADE\n\nPostDown = iptables -t nat -D PREROUTING -p tcp --dport 554 -j DNAT \\\n--to-destination 192.168.1.201:554\nPostDown = iptables -t nat -D POSTROUTING -j MASQUERADE\n\n[Peer]\nPublicKey = XXX\nEndpoint = IP:PORT or DNS:PORT\nAllowedIPs = 192.168.1.201/32, 10.83.153.1/32\nPersistentKeepalive = 25\n</code></pre> <p>Info</p> <p>I've set MTU value to 1480 because distant connection is slow (~ 8 mbps)</p> </li> <li> <p>Deploy the Stack:</p> <ul> <li>Run <code>docker compose up -d</code> in the directory containing <code>docker-compose.yml</code>.</li> </ul> </li> <li> <p>Configure GO2RTC on Ubuntu VM:</p> <ul> <li>Access the Go2RTC configuration page (<code>http://serverip:1984</code>).</li> <li>Click on <code>Config</code> tab and write something like this :</li> </ul> GO2RTC Configuration<pre><code>log:\nrtsp: info\nstreams:\nmystream: rtsp://camera:password@wireguard/Streaming/Channels/101\nrtsp:\nlisten: \":8554\"       # RTSP Server TCP port, default - 8554\nusername: \"admin\"     # optional, default - disabled\npassword: \"pass\"      # optional, default - disabled\ndefault_query: \"mp4\"  # optional, default codecs filters\n</code></pre> </li> <li> <p>Integrating with Home Assistant:</p> <ul> <li>Ensure the go2rtc addon is installed: </li> <li>Go to the go2rtc config and write something like this: <pre><code>streams:\nmystream: rtsp://admin:pass@192.168.0.203:8554/mamie\nhomekit:\nmamie:\npin: 12345678\nname: MY CAMERA\ndevice_id: my_camera_1\ndevice_private: my_camera_1\n</code></pre></li> <li>Now add the camera to the HomeKit Bridge configuration: </li> </ul> </li> </ol>"},{"location":"docker/wireguard_go2rtc_nat/#conclusion","title":"Conclusion","text":"<p>With these steps, you should be able to stream your remote camera in real-time and view it in your Home app.</p>"},{"location":"isp/","title":"ISP","text":""},{"location":"isp/#what-does-it-means","title":"What does it means","text":"<p>ISP stands for Internet Service Provider</p>"},{"location":"isp/bypass-livebox/","title":"How to replace Orange LIVEBOX by UDM PRO SE ?","text":""},{"location":"isp/bypass-livebox/#what-do-you-need","title":"What do you need ?","text":"<ul> <li>1 UDM PRO SE</li> <li>1 LEOX GPON STICK LXT-010S-H</li> <li>1 SC-APC / SC-UPC Cable</li> </ul> <p>Info</p> <p>You can order the GPON by sending a mail, or on Contact page, Price is 70 USD netto/piece (for purchase as an individual, there is +23% VAT) delivery. It makes arount 90 EUR (for individual), depends on the USD course and delivery destination.</p> <p>Warning</p> <p>Be sure to take an SC-APC / SC-UPC Cable (Green / Blue).</p> <p>SC-UPC (Blue) will be plugged into the GPON</p> <p>SC-APC (Green) will be plugged into your socket in your house/appartment</p>"},{"location":"isp/bypass-livebox/#step-1-create-configuration-network","title":"STEP 1 : Create configuration network","text":"<p>On the UDM PRO SE :</p> <ul> <li>Create a new network named : <code>CONF LEOX</code></li> <li>Uncheck Auto-Scale Network</li> <li>Set Host Address to : <code>192.168.100.2</code></li> <li>Set Netmask to <code>29</code> to allow 5 IPs</li> <li>Set DHCP Mode to : <code>DHCP Server</code></li> <li>Set DHCP Rans to :</li> <li>Start : <code>192.168.100.2</code></li> <li>Stop : <code>192.168.100.6</code></li> </ul> <p></p>"},{"location":"isp/bypass-livebox/#step-2-connect-the-gpon-adapter-for-configuration","title":"STEP 2 : Connect the GPON Adapter for configuration","text":"<p>Warning</p> <p>GPON should be plugged into LAN port (PORT 11)</p> <p>On the UDM PRO SE :</p> <ul> <li>Set Port Profile of GPON to network freshly created : <code>CONF LEOX</code></li> <li>Apply changes</li> </ul> <p></p>"},{"location":"isp/bypass-livebox/#step-3-allow-your-computer-to-access-gpon-configuration","title":"STEP 3 : Allow your computer to access GPON configuration","text":"<p>Info</p> <p>Because we add a DHCP Server on this network, your computer will automatically receive an IP Address on the same subnet as GPON</p> <p>In order to be able to communicate with GPON, you need to be on the same subnet as GPON</p> <p>On the UDM PRO SE :</p> <ul> <li>Set Port Profile of your computer to <code>CONF LEOX</code> port</li> <li>Apply changes</li> </ul> <p></p>"},{"location":"isp/bypass-livebox/#step-4-upgrade-gpon-to-latest-version","title":"STEP 4 : Upgrade GPON to latest version","text":"<ul> <li>Go to http://192.168.100.1/upgrade.asp</li> <li> <p>Fill the basic authentication with these values :</p> </li> <li> <p>Username : <code>leox</code></p> </li> <li> <p>Password : <code>leolabs_7</code></p> </li> <li> <p>Download the firmware</p> </li> <li>Select the firmware on your laptop</li> <li>Click on <code>Upgrade</code> button</li> <li>Confirm you want to upgrade</li> </ul> <p></p> <p>Info</p> <p>Today, there is no changelog page on Leolabs website, but they had in mind to prepare one.</p>"},{"location":"isp/bypass-livebox/#step-5-verify-that-version-is-latest-one","title":"STEP 5 : Verify that version is latest one","text":"<p>Once you upgrade to latest version, you should verify that</p> <ul> <li>Go to http://192.168.100.1/status.asp</li> <li>Firmware version should be : <code>V3.3.4L4rc5</code></li> </ul> <p></p>"},{"location":"isp/bypass-livebox/#step-6-connect-to-gpon-via-telnet","title":"STEP 6 : Connect to GPON via telnet","text":"<p>On the UDM PRO SE</p> <ul> <li>Install telnet package</li> </ul> <pre><code>apt update\napt install telnet\n</code></pre> <ul> <li>Initiate a telnet connection to GPON</li> </ul> <pre><code>telnet 192.168.100.1\nTrying 192.168.100.1...\nConnected to 192.168.100.1.\nEscape character is '^]'.\nLXT-010S-H login: leox\nPassword: leolabs_7\n#\n</code></pre> <p>You are now connected into the GPON</p>"},{"location":"isp/bypass-livebox/#step-7-get-informations-from-livebox","title":"STEP 7 : Get informations from Livebox","text":"<p>I've made a little application written in GO to fetch directly informations from Livebox</p> <ul> <li>Download the app : GOBOX</li> <li>Execute it</li> <li>Fill IP, Username and Password</li> </ul> <p>You should have something like that :</p> <pre><code>&gt; ./gobox\nLivebox IP : 192.168.1.1\nUsername : admin\nPassword :\n\u2705 Successfully connected to Livebox ! \u2705\n\n===========LEOX GPON COMMAND=============\nflash set GPON_PLOAM_PASSWD DEFAULT012\nflash set OMCI_TM_OPT 0\nflash set OMCI_OLT_MODE 1\nflash set GPON_SN XXXXXXXXXXXX\nflash set PON_VENDOR_ID SMBS\nflash set HW_HWVER XXXXXXXXXXXX\nflash set OMCI_SW_VER1 XXXXXXXXXXXXX\nflash set OMCI_SW_VER2 XXXXXXXXXXXXX\n=========================================\n==========UDM PRO SE SETTINGS============\nNAME              : LEOX GPON\nVLAN ID           : 832\nMAC Address Clone : XX:XX:XX:XX:XX:XX\nDHCP OPTION 60    : sagem\nDHCP OPTION 77    : FSVDSL_livebox.Internet.softathome.Livebox5\nDHCP OPTION 90    : 00:00:00:00:00:00:00:00:00:00:00:1a:09:00:00:05:58:01:03:41:01:0D:66:74:69:2F:67:66:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX\nDHCP CoS          : 6\n=========================================\n</code></pre>"},{"location":"isp/bypass-livebox/#step-8-configure-the-gpon","title":"STEP 8 : Configure the GPON","text":"<ul> <li>Go back to GPON configuration</li> <li>Copy / Paste all <code>LEOX GPON COMMAND</code> fetched on STEP 7</li> <li>Verify GPON state</li> </ul> <pre><code>&gt; diag gpon get onu-state\n# IT SHOULD RETURN 05\ngpon get onu-state\nONU state: Operation State(O5)\n</code></pre> <p>Info</p> <ul> <li>If you have <code>Operation State(01)</code> please check your cable</li> <li>If you have <code>Operation State(05)</code> it seems to be OK we can continue</li> </ul> <p>Now it's time to find the <code>OltVendorId</code></p> <pre><code>&gt; omcicli mib get 131\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nOltG\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n=================================\nEntityId: 0x00\nOltVendorId: ALCL\nEquipId:\nVersion:\nToDInfo:\n Sequence number of GEM superframe: 0x0\n Timestamp: secs 0, nanosecs 0\n=================================\n</code></pre> <p>You should have something in <code>OltVendorId</code>, if you have nothing please check previous steps.</p> <p>Ok so now my <code>OltVendorId</code> is <code>ALCL</code> which is Alcatel</p> <p>Tell the GPON that <code>OMCC_VER</code> is <code>128</code></p> <pre><code>flash set OMCC_VER 128\n</code></pre> OltVendorID OMCC_VER ALCL 128 HWTC 136 <p>GPON Configuration is done</p>"},{"location":"isp/bypass-livebox/#step-9-configure-the-udm-pro-se","title":"STEP 9 : Configure the UDM PRO SE","text":"<p>Be sure to running <code>Unifi Network</code> version &gt;= 7.4.145</p> <ul> <li>Go to UDM PRO SE -&gt; Network -&gt; Settings -&gt; Internet</li> <li>Select second internet source</li> </ul> <p></p> <p>Fill everything returned by STEP 7</p> <p>Apply your changes</p> <p>You should optain something like this :</p> <p></p>"},{"location":"isp/bypass-livebox/#step-10-test-in-production","title":"STEP 10 : Test in production","text":"<ul> <li>Move the GPON from port <code>11</code> to port <code>10</code></li> <li>Wait a bit</li> <li>You should see an IP address on Network -&gt; Settings -&gt; Internet :</li> </ul> <p>You are now connected to internet without using Orange Livebox anymore</p> <p>Warning</p> <p>If you have a private IP like <code>172.16.152.14</code> there is a misconfiguration. Check all steps and try again</p>"},{"location":"proxmox/","title":"Overview","text":"<p>You will find in this section all about my Proxmox environment</p>"},{"location":"proxmox/ovhcloud/configuration/","title":"Network configuration","text":""},{"location":"proxmox/ovhcloud/configuration/#how-to-have-network-and-let-be-accessible-from-internet-without-additionnal-ip","title":"How to have network and let be accessible from internet without additionnal ip","text":"<p>On your Proxmox instance bash :</p> <p>Update the file <code>/etc/network/interfaces</code> and add this at the end of the file</p> <pre><code>auto vmbr1\niface vmbr1 inet static\n  address 10.0.0.1/24\n  netmask 255.255.255.0\n  bridge-ports none\n  bridge-stp off\n  bridge-fd 0\n  post-up echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n  post-up iptables -t nat -A POSTROUTING -s '10.0.0.0/24' -o vmbr0 -j MASQUERADE\n  post-down iptables -t nat -D POSTROUTING -s '10.0.0.0/24' -o vmbr0 -j MASQUERADE\n</code></pre> <p>Restart services : <code>service networking restart</code></p> <p>You should have something like that :</p> <p></p> <p>With this configuration, when you create a VM simply choose <code>vmbr1</code> network.</p>"},{"location":"proxmox/ovhcloud/configuration/#nat-port-forwarding","title":"NAT port forwarding","text":"<p>To add port forwarding you can simply update the <code>/etc/network/interfaces</code> file and add this line in <code>iface vmbr1 inet static</code> update the line according to your need</p> <pre><code>post-up iptables -t nat -A PREROUTING -i vmbr0 -p tcp --dport 3389 -j DNAT --to 10.0.0.2:3389\npost-down iptables -t nat -D PREROUTING -i vmbr0 -p tcp --dport 3389 -j DNAT --to 10.0.0.2:3389\n\n## Add DHCP and DNS server to your Proxmox Virtual Environment\n\nTo do that, we will use dnsmasq which is a simple and lightweight app\n\n```bash\napt install dnsmasq -y\n</code></pre> <p>Edit the configuration file</p> <pre><code>vim /etc/dnsmasq.conf\n</code></pre> <p>Fill these values :</p> <pre><code>server=1.1.1.1 #DNS Server IP\ninterface=vmbr1 #Interface where dnsmasq will works\ndomain=stephang.local #Optional\ndhcp-range=10.0.0.10,10.0.0.150,1h #It's an example\ndhcp-option=vmbr1,3,10.0.0.1\ndhcp-leasefile=/var/lib/misc/dnsmasq.leases #Uncomment it line 538\n# If you want to reserve IP for specific mac :\ndhcp-host=E6:13:98:65:CA:9F,10.0.0.2,SERVER1\ndhcp-host=G2:84:14:27:FE:4G,10.0.0.3,SERVER2\n</code></pre> <p>Restart the service :</p> <pre><code>service dnsmasq restart\n</code></pre> <p>That's all ! Now when you create a VM and set vmbr1 network, VM will have network and auto generated IP !</p>"},{"location":"proxmox/ovhcloud/configuration/#bonus-add-dns-record-accessible-by-all-clients","title":"Bonus : add DNS record accessible by all clients","text":"<p>Sometimes when you want to add local dns records and with dnsmasq it's really easy, you need to simply update your hosts file</p> <pre><code>vim /etc/hosts\n\n10.0.0.2 server1.stephang.local\n</code></pre> <p>Now all ips in vmbr1 will have the dns record</p>"},{"location":"proxmox/ovhcloud/installation/","title":"Installation on OVHcloud provider","text":"<ul> <li> <p>Order a dedicated server on OVHcloud website. It can be also an eco one</p> </li> <li> <p>Install Proxmox using the OVHcloud manager or the API</p> </li> </ul> <p></p> <p></p> <p></p> Warning <p>Don't forget to select your SSHKey !</p> <p></p> <ul> <li>Click on confirm</li> </ul> <p>Wait around 10 minutes to installation complete You will receive an email when it's done</p> Success <p>Your proxmox server is now installed !</p>"},{"location":"proxmox/personal/presentation/","title":"Hardware","text":"<p>Beelink S12 Pro Mini PC</p> <ul> <li>Intel Alder Lake-N N100</li> <li>16 Go DDR4</li> <li>2 * 500Go (nvme and SSD Sata)</li> </ul>"},{"location":"proxmox/personal/configuration/iGPU%20passthrough/","title":"iGPU passthrough","text":"<p>Tutorial inspired by this one</p>"},{"location":"proxmox/personal/configuration/iGPU%20passthrough/#enable-vga-card-uefi-with-zfs","title":"Enable VGA card UEFI with ZFS","text":"<ol> <li> <p>Connect to Proxmox with SSH or via SHELL</p> </li> <li> <p>Edit the kernel cmdline file <pre><code>vim /etc/kernel/cmdline\n</code></pre> Append <code>quiet intel_iommu=on iommu=pt</code> to the line, you should obtain something like this : <pre><code>root@pve:~# cat /etc/kernel/cmdline\nroot=ZFS=rpool/ROOT/pve-1 boot=zfs quiet intel_iommu=on iommu=pt\n</code></pre></p> </li> <li> <p>Update the modules file <pre><code>vim /etc/modules\n</code></pre> Add this to the file : <pre><code>vfio\nvfio_iommu_ype1\nvfio_pci\nvfio_virqf\n</code></pre> You should obtain something like this : <pre><code>root@pve:~# cat /etc/modules\n# /etc/modules: kernel modules to load at boot time.\n#\n# This file contains the names of kernel modules that should be loaded\n# at boot time, one per line. Lines beginning with \"#\" are ignored.\n# Parameters can be specified after the module name.\nvfio\nvfio_iommu_ype1\nvfio_pci\nvfio_virqfd\n</code></pre></p> </li> <li> <p>Refresh the efi boot file <code>pve-efiboot-tool refresh</code> <pre><code>root@pve:~# pve-efiboot-tool refresh\nRunning hook script 'proxmox-auto-removal'..\nRunning hook script 'zz-proxmox-boot'..\nRe-executing '/etc/kernel/postinst.d/zz-proxmox-boot' in new private mount namespace..\nCopying and configuring kernels on /dev/disk/by-uuid/5EBA-2B61\n    Copying kernel and creating boot-entry for 6.2.16-19-pve\n    Copying kernel and creating boot-entry for 6.5.11-4-pve\n    Removing old version 6.2.16-3-pve\nCopying and configuring kernels on /dev/disk/by-uuid/5EBA-9A63\n    Copying kernel and creating boot-entry for 6.2.16-19-pve\n    Copying kernel and creating boot-entry for 6.5.11-4-pve\n    Removing old version 6.2.16-3-pve\n</code></pre></p> </li> <li> <p>Reboot the system <pre><code>root@pve:~# reboot\n</code></pre></p> </li> <li> <p>Verify that IOMMU is enabled <code>dmesg | grep -e DMAR -e IOMMU</code> <pre><code>root@pve:~# dmesg | grep -e DMAR -e IOMMU\n[    0.017850] ACPI: DMAR 0x0000000075516000 000088 (v02 INTEL  EDK2     00000002      01000013)\n[    0.017883] ACPI: Reserving DMAR table memory at [mem 0x75516000-0x75516087]\n[    0.047825] DMAR: IOMMU enabled\n[    0.106238] DMAR: Host address width 39\n</code></pre></p> </li> </ol>"},{"location":"proxmox/personal/configuration/iGPU%20passthrough/#configure-the-igpu-to-ubuntu-guest-vm","title":"Configure the iGPU to Ubuntu guest VM","text":"<ol> <li>Create a Ubuntu VM (I've a 22.04.3 LTS one)</li> </ol> <p>Warning</p> <p>It needs to have at least:</p> <ul> <li>BIOS: OMVF (UEFI)</li> <li>Machine: q35</li> </ul> <ol> <li> <p>Pass the iGPU from proxmox to the VM      Add new PCI Device </p> </li> <li> <p>Choose the one with <code>Alder Lake-N [UHD Graphics]</code> Choose the iGPU device </p> </li> <li> <p>Enable some functions      </p> </li> <li> <p>Disable the display of the VM      </p> </li> <li> <p>Reboot the VM</p> </li> <li>Connect to it through SSH</li> <li>Install <code>linux-image-generic-hwe-22.04</code> <pre><code>root@ubuntu-docker:/# apt update\nroot@ubuntu-docker:/# apt install linux-image-generic-hwe-22.04\n</code></pre></li> <li>Reboot <pre><code>root@ubuntu-docker:/# reboot\n</code></pre></li> <li>Check that <code>renderD128</code> is present <pre><code>root@ubuntu-docker:~# ls /dev/dri\nby-path  card0  renderD128\n</code></pre></li> </ol> <p>You're good to go !</p>"},{"location":"proxmox/personal/installation/","title":"Installation","text":"<p>Simply follow these steps :</p>"},{"location":"proxmox/personal/installation/#step-1","title":"Step 1","text":"<p> Click on first link</p>"},{"location":"proxmox/personal/installation/#step-2","title":"Step 2","text":"<p> Accept the End User License Agreement (EULA)</p>"},{"location":"proxmox/personal/installation/#step-3","title":"Step 3","text":"<p> Click on option, choose zfs (RAID1) and click on next</p>"},{"location":"proxmox/personal/installation/#step-4","title":"Step 4","text":"<p> Configure your location and time zone</p>"},{"location":"proxmox/personal/installation/#step-5","title":"Step 5","text":"<p> Set password and valid email</p>"},{"location":"proxmox/personal/installation/#step-6","title":"Step 6","text":"<p> Update the network config according your needs</p>"},{"location":"proxmox/personal/installation/#step-7","title":"Step 7","text":"<p> Install Proxmox</p>"},{"location":"proxmox/personal/installation/#step-8","title":"Step 8","text":"<p> Proxmox is well installed</p>"}]}